name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
            
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y --no-upgrade g++ cmake ninja-build libsfml-dev

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}

    - name: Build
      run: >
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    - name: Test
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run check code formatting
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Находим все файлы .cpp и .hpp и проверяем их форматирование
        unformatted_files=$(find ${{ github.workspace }}/src ${{ github.workspace }}/include ${{ github.workspace }}/tests -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror)
    
        # Проверяем, есть ли неотформатированные файлы
        if [ -z "$unformatted_files" ]; then
          echo "All files are properly formatted."
        else
          echo "The following files need formatting:"
          echo "$unformatted_files"
          exit 1  # Завершаем с ошибкой, если есть неотформатированные файлы
        fi
